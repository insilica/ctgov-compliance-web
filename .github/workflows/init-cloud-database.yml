name: Initialize Cloud Database with Mock Data

on:
  workflow_dispatch:
    inputs:
      force:
        description: 'Force repopulation (even if data exists)'
        required: false
        default: false
        type: boolean
      organizations:
        description: 'Number of organizations to create'
        required: false
        default: '100'
        type: string
      users:
        description: 'Number of users to create'
        required: false
        default: '10'
        type: string
      trials:
        description: 'Number of trials to create'
        required: false
        default: '1000'
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GCP_GAR_LOCATION }}
  REPOSITORY: ${{ secrets.GCP_REPOSITORY }}

jobs:
  init-database:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-data-init
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest

      - name: Build and Push Data Init Container
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.data-init
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Run Database Initialization
        run: |
          # Get Cloud SQL connection details from Cloud Run service
          SERVICE_NAME="${{ secrets.GCP_CLOUDRUN_SERVICE_NAME }}"

          # Get the Cloud SQL instance connection name
          INSTANCE_CONNECTION=$(gcloud run services describe ${SERVICE_NAME} \
            --region=${{ secrets.GCP_REGION }} \
            --format='value(spec.template.metadata.annotations."run.googleapis.com/cloudsql-instances")')

          if [ -z "$INSTANCE_CONNECTION" ]; then
            echo "Error: Could not retrieve Cloud SQL instance connection name"
            exit 1
          fi

          # Clean up existing job if it exists (for workflow re-runs)
          JOB_NAME="init-database-${{ github.run_number }}"
          if gcloud run jobs describe $JOB_NAME --region=${{ secrets.GCP_REGION }} &>/dev/null; then
            echo "Cleaning up existing data initialization job..."
            gcloud run jobs delete $JOB_NAME \
              --region=${{ secrets.GCP_REGION }} \
              --quiet
          fi

          # Prepare environment variables for script arguments
          echo "Preparing environment variables..."
          echo "Organizations: ${{ github.event.inputs.organizations }}"
          echo "Users: ${{ github.event.inputs.users }}"
          echo "Trials: ${{ github.event.inputs.trials }}"
          echo "Force: ${{ github.event.inputs.force }}"

          # Build environment variables string
          ENV_VARS="DB_HOST=/cloudsql/${INSTANCE_CONNECTION}"
          ENV_VARS="${ENV_VARS},DB_PORT=5432"
          ENV_VARS="${ENV_VARS},DB_NAME=${{ secrets.GCP_DB_NAME }}"
          ENV_VARS="${ENV_VARS},DB_USER=${{ secrets.GCP_DB_USER }}"
          ENV_VARS="${ENV_VARS},CLOUD_SQL_INSTANCE=${INSTANCE_CONNECTION}"
          ENV_VARS="${ENV_VARS},NUM_ORGS=${{ github.event.inputs.organizations }}"
          ENV_VARS="${ENV_VARS},NUM_USERS=${{ github.event.inputs.users }}"
          ENV_VARS="${ENV_VARS},NUM_TRIALS=${{ github.event.inputs.trials }}"
          
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            ENV_VARS="${ENV_VARS},FORCE_REPOPULATE=true"
          fi

          echo "Environment variables: $ENV_VARS"

          # Create and run the data initialization job
          echo "Creating Cloud Run job for database initialization..."
          
          # Use the exact image that was built and pushed
          IMAGE_URI="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-data-init:${{ steps.meta.outputs.version }}"
          echo "Using image: $IMAGE_URI"
          
          # Verify the image exists
          echo "Verifying image exists..."
          gcloud container images list-tags ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-data-init --limit=5
          
          gcloud run jobs create $JOB_NAME \
            --image="$IMAGE_URI" \
            --region=${{ secrets.GCP_REGION }} \
            --service-account=${{ secrets.GCP_WIF_SERVICE_ACCOUNT }} \
            --set-cloudsql-instances=${INSTANCE_CONNECTION} \
            --set-env-vars="$ENV_VARS" \
            --set-secrets="DB_PASSWORD=${{ secrets.GCP_DB_PASSWORD_SECRET }}:latest" \
            --max-retries=0 \
            --parallelism=1 \
            --task-timeout=30m \
            --memory=2Gi \
            --cpu=1

          # Execute the job and wait for completion
          echo "Executing database initialization job..."
          set +e  # Temporarily disable exit on error
          gcloud run jobs execute $JOB_NAME \
            --region=${{ secrets.GCP_REGION }} \
            --wait
          EXECUTION_RESULT=$?
          set -e  # Re-enable exit on error

          # Get job execution status
          EXECUTION_STATUS=$(gcloud run jobs executions list \
            --job=$JOB_NAME \
            --region=${{ secrets.GCP_REGION }} \
            --limit=1 \
            --format='value(status.conditions[0].type)' 2>/dev/null || echo "Failed")

          if [ "$EXECUTION_STATUS" = "Completed" ] && [ $EXECUTION_RESULT -eq 0 ]; then
            echo "✅ Database initialization completed successfully!"
          else
            echo "❌ Database initialization failed!"
            echo "Execution result: $EXECUTION_RESULT"
            echo "Execution status: $EXECUTION_STATUS"
            
            # Get logs for debugging
            echo "Getting job execution logs..."
            EXECUTION_NAME=$(gcloud run jobs executions list \
              --job=$JOB_NAME \
              --region=${{ secrets.GCP_REGION }} \
              --limit=1 \
              --format='value(metadata.name)' 2>/dev/null || echo "unknown")
            
            echo "Execution name: $EXECUTION_NAME"
            
            if [ "$EXECUTION_NAME" != "unknown" ] && [ -n "$EXECUTION_NAME" ]; then
              echo "Getting Cloud Logging logs..."
              gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=$JOB_NAME AND resource.labels.location=${{ secrets.GCP_REGION }}" \
                --limit=100 \
                --format='value(textPayload)' \
                --freshness=5m || echo "Failed to retrieve Cloud Logging logs"
                
              echo "Getting execution details..."
              gcloud run jobs executions describe $EXECUTION_NAME \
                --region=${{ secrets.GCP_REGION }} \
                --format='value(status.conditions[].message)' || echo "Failed to get execution details"
            fi
            
            exit 1
          fi

          # Clean up the job
          echo "Cleaning up job..."
          gcloud run jobs delete $JOB_NAME \
            --region=${{ secrets.GCP_REGION }} \
            --quiet

      - name: Verify Database Population
        run: |
          echo "Database initialization workflow completed."
          echo "Your Cloud SQL database should now be populated with mock data."
          echo "You can verify this by running your Cloud Run service and checking the data." 