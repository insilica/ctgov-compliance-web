name: Run Compliance Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: devpassword
          POSTGRES_DB: ctgov-web
        ports:
          - 5464:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Setup environment and run tests
        env:
          # CI flag to prevent PostgreSQL setup conflicts
          CI: true
          SKIP_POSTGRES_SETUP: true
          # Flask configuration
          FLASK_APP: web.app
          FLASK_ENV: development
          FLASK_DEBUG: 1
          SECRET_KEY: github-actions-test-key
          # Database configuration (use the service)
          DB_HOST: localhost
          DB_PORT: 5464
          DB_NAME: ctgov-web
          DB_USER: postgres
          DB_PASSWORD: devpassword
          DB_POOL_SIZE: 5
          # PostgreSQL environment variables
          PGUSER: postgres
          PGPASSWORD: devpassword
          PGHOST: localhost
          PGPORT: 5464
          PGDATABASE: ctgov-web
          # Python path
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "Running tests with Nix in CI environment..."
          
          # Wait for PostgreSQL service to be ready
          echo 'Waiting for PostgreSQL service to be ready...'
          timeout 60s bash -c '
            until pg_isready -h localhost -p 5464 -U postgres; do
              echo "Waiting for PostgreSQL..."
              sleep 2
            done
          '
          
          # Verify database connection
          echo 'Testing database connection...'
          PGPASSWORD=devpassword psql -h localhost -p 5464 -U postgres -d ctgov-web -c 'SELECT version();'
          
          # Use nix develop to get dependencies and run migrations + tests
          nix develop --command bash -c "
            # Run Flyway migrations to set up database schema
            echo 'Running Flyway migrations...'
            flyway \\
              -url='jdbc:postgresql://localhost:5464/ctgov-web' \\
              -user='postgres' \\
              -password='devpassword' \\
              -locations='filesystem:./.flyway/sql' \\
              migrate
            
            uv sync 
            
            # Run tests with verbose output
            echo 'Running tests...'
            uv run pytest
          "
          
      - name: Upload Flyway Report on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: flyway-report
          path: ${{ github.workspace }}/report.html
