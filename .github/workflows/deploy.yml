name: Build, Migrate and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GCP_GAR_LOCATION }}
  REPOSITORY: ${{ secrets.GCP_REPOSITORY }}

jobs:
  build-push:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Container
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and Push Migration Container
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.migration
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-web-migration:main
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-preview:
    needs: build-push
    if: github.event_name == 'pull_request' && !contains(github.event.pull_request.title, '[skip deploy]')
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ctgov-web-preview-pr-${{ github.event.pull_request.number }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-web:pr-${{ github.event.pull_request.number }}
          region: ${{ secrets.GCP_REGION }}
          flags: |
            --port=6525
            --max-instances=2
            --cpu=1
            --memory=1Gi
            --timeout=60
            --concurrency=80
            --allow-unauthenticated
            --service-account=${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}
          env_vars: |
            ENVIRONMENT=preview
            PR_NUMBER=${{ github.event.pull_request.number }}

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = '${{ steps.deploy.outputs.url }}';
            const pr_number = context.issue.number;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview deployment')
            );

            const body = `🚀 **Preview deployment ready!**

            🔗 Preview URL: ${preview_url}
            📝 PR: #${pr_number}

            This preview will be automatically cleaned up when the PR is closed or merged.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: body
              });
            }

  run-migrations:
    needs: build-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Run Database Migrations
        run: |
          # Get Cloud SQL connection details from Cloud Run service
          SERVICE_NAME="${{ secrets.GCP_CLOUDRUN_SERVICE_NAME }}"

          # Get the Cloud SQL instance connection name
          INSTANCE_CONNECTION=$(gcloud run services describe ${SERVICE_NAME} \
            --region=${{ secrets.GCP_REGION }} \
            --format='value(metadata.annotations."run.googleapis.com/cloudsql-instances")')

          if [ -z "$INSTANCE_CONNECTION" ]; then
            echo "Error: Could not retrieve Cloud SQL instance connection name"
            exit 1
          fi

          # Clean up existing job if it exists (for workflow re-runs)
          if gcloud run jobs describe migrate-db-${{ github.run_number }} --region=${{ secrets.GCP_REGION }} &>/dev/null; then
            echo "Cleaning up existing migration job..."
            gcloud run jobs delete migrate-db-${{ github.run_number }} \
              --region=${{ secrets.GCP_REGION }} \
              --quiet
          fi

          # Run migration container as a Cloud Run job
          gcloud run jobs create migrate-db-${{ github.run_number }} \
            --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-web-migration:main \
            --region=${{ secrets.GCP_REGION }} \
            --service-account=${{ secrets.GCP_WIF_SERVICE_ACCOUNT }} \
            --set-cloudsql-instances=${INSTANCE_CONNECTION} \
            --set-env-vars="DB_HOST=/cloudsql/${INSTANCE_CONNECTION},DB_PORT=5432,DB_NAME=${{ secrets.GCP_DB_NAME }},DB_USER=${{ secrets.GCP_DB_USER }},CLOUD_SQL_INSTANCE=${INSTANCE_CONNECTION}" \
            --set-secrets="DB_PASSWORD=${{ secrets.GCP_DB_PASSWORD_SECRET }}:latest" \
            --max-retries=0 \
            --parallelism=1 \
            --task-timeout=10m

          # Execute the job and wait for completion
          gcloud run jobs execute migrate-db-${{ github.run_number }} \
            --region=${{ secrets.GCP_REGION }} \
            --wait

          # Clean up the job
          gcloud run jobs delete migrate-db-${{ github.run_number }} \
            --region=${{ secrets.GCP_REGION }} \
            --quiet

  deploy-dev:
    needs: run-migrations
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run (Dev)
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.GCP_CLOUDRUN_SERVICE_NAME }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/ctgov-compliance-web:main
          region: ${{ secrets.GCP_REGION }}

